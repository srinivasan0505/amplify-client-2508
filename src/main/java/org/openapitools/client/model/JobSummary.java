/*
 * AWS Amplify
 * Amplify enables developers to develop and deploy cloud-powered mobile and web apps. The Amplify Console provides a continuous delivery and hosting service for web applications. For more information, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify Console User Guide</a>. The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework.</a> 
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.JobStatus;
import org.openapitools.client.model.JobType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:08:57.241962+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class JobSummary {
  public static final String SERIALIZED_NAME_JOB_ARN = "jobArn";
  @SerializedName(SERIALIZED_NAME_JOB_ARN)
  @javax.annotation.Nonnull
  private String jobArn;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  @javax.annotation.Nonnull
  private String jobId;

  public static final String SERIALIZED_NAME_COMMIT_ID = "commitId";
  @SerializedName(SERIALIZED_NAME_COMMIT_ID)
  @javax.annotation.Nonnull
  private String commitId;

  public static final String SERIALIZED_NAME_COMMIT_MESSAGE = "commitMessage";
  @SerializedName(SERIALIZED_NAME_COMMIT_MESSAGE)
  @javax.annotation.Nonnull
  private String commitMessage;

  public static final String SERIALIZED_NAME_COMMIT_TIME = "commitTime";
  @SerializedName(SERIALIZED_NAME_COMMIT_TIME)
  @javax.annotation.Nonnull
  private OffsetDateTime commitTime;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nonnull
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private JobStatus status;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  @javax.annotation.Nonnull
  private JobType jobType;

  public JobSummary() {
  }

  public JobSummary jobArn(@javax.annotation.Nonnull String jobArn) {
    this.jobArn = jobArn;
    return this;
  }

  /**
   * Get jobArn
   * @return jobArn
   */
  @javax.annotation.Nonnull
  public String getJobArn() {
    return jobArn;
  }

  public void setJobArn(@javax.annotation.Nonnull String jobArn) {
    this.jobArn = jobArn;
  }


  public JobSummary jobId(@javax.annotation.Nonnull String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nonnull
  public String getJobId() {
    return jobId;
  }

  public void setJobId(@javax.annotation.Nonnull String jobId) {
    this.jobId = jobId;
  }


  public JobSummary commitId(@javax.annotation.Nonnull String commitId) {
    this.commitId = commitId;
    return this;
  }

  /**
   * Get commitId
   * @return commitId
   */
  @javax.annotation.Nonnull
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(@javax.annotation.Nonnull String commitId) {
    this.commitId = commitId;
  }


  public JobSummary commitMessage(@javax.annotation.Nonnull String commitMessage) {
    this.commitMessage = commitMessage;
    return this;
  }

  /**
   * Get commitMessage
   * @return commitMessage
   */
  @javax.annotation.Nonnull
  public String getCommitMessage() {
    return commitMessage;
  }

  public void setCommitMessage(@javax.annotation.Nonnull String commitMessage) {
    this.commitMessage = commitMessage;
  }


  public JobSummary commitTime(@javax.annotation.Nonnull OffsetDateTime commitTime) {
    this.commitTime = commitTime;
    return this;
  }

  /**
   * Get commitTime
   * @return commitTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCommitTime() {
    return commitTime;
  }

  public void setCommitTime(@javax.annotation.Nonnull OffsetDateTime commitTime) {
    this.commitTime = commitTime;
  }


  public JobSummary startTime(@javax.annotation.Nonnull OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nonnull OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public JobSummary status(@javax.annotation.Nonnull JobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public JobStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull JobStatus status) {
    this.status = status;
  }


  public JobSummary endTime(@javax.annotation.Nullable OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(@javax.annotation.Nullable OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public JobSummary jobType(@javax.annotation.Nonnull JobType jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * Get jobType
   * @return jobType
   */
  @javax.annotation.Nonnull
  public JobType getJobType() {
    return jobType;
  }

  public void setJobType(@javax.annotation.Nonnull JobType jobType) {
    this.jobType = jobType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobSummary jobSummary = (JobSummary) o;
    return Objects.equals(this.jobArn, jobSummary.jobArn) &&
        Objects.equals(this.jobId, jobSummary.jobId) &&
        Objects.equals(this.commitId, jobSummary.commitId) &&
        Objects.equals(this.commitMessage, jobSummary.commitMessage) &&
        Objects.equals(this.commitTime, jobSummary.commitTime) &&
        Objects.equals(this.startTime, jobSummary.startTime) &&
        Objects.equals(this.status, jobSummary.status) &&
        Objects.equals(this.endTime, jobSummary.endTime) &&
        Objects.equals(this.jobType, jobSummary.jobType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobArn, jobId, commitId, commitMessage, commitTime, startTime, status, endTime, jobType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobSummary {\n");
    sb.append("    jobArn: ").append(toIndentedString(jobArn)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    commitMessage: ").append(toIndentedString(commitMessage)).append("\n");
    sb.append("    commitTime: ").append(toIndentedString(commitTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobArn");
    openapiFields.add("jobId");
    openapiFields.add("commitId");
    openapiFields.add("commitMessage");
    openapiFields.add("commitTime");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("endTime");
    openapiFields.add("jobType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobArn");
    openapiRequiredFields.add("jobId");
    openapiRequiredFields.add("commitId");
    openapiRequiredFields.add("commitMessage");
    openapiRequiredFields.add("commitTime");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("jobType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobSummary is not found in the empty JSON string", JobSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `jobArn`
      String.validateJsonElement(jsonObj.get("jobArn"));
      // validate the required field `jobId`
      String.validateJsonElement(jsonObj.get("jobId"));
      // validate the required field `commitId`
      String.validateJsonElement(jsonObj.get("commitId"));
      // validate the required field `commitMessage`
      String.validateJsonElement(jsonObj.get("commitMessage"));
      // validate the required field `commitTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("commitTime"));
      // validate the required field `startTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      // validate the required field `status`
      JobStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `endTime`
      if (jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endTime"));
      }
      // validate the required field `jobType`
      JobType.validateJsonElement(jsonObj.get("jobType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<JobSummary>() {
           @Override
           public void write(JsonWriter out, JobSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobSummary
   * @throws IOException if the JSON string is invalid with respect to JobSummary
   */
  public static JobSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobSummary.class);
  }

  /**
   * Convert an instance of JobSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

