/*
 * AWS Amplify
 * Amplify enables developers to develop and deploy cloud-powered mobile and web apps. The Amplify Console provides a continuous delivery and hosting service for web applications. For more information, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify Console User Guide</a>. The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework.</a> 
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:08:57.241962+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class StartJobRequest {
  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  @javax.annotation.Nullable
  private String jobId;

  /**
   *  Describes the type for the job. The job type &lt;code&gt;RELEASE&lt;/code&gt; starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type &lt;code&gt;RETRY&lt;/code&gt; retries an existing job. If the job type value is &lt;code&gt;RETRY&lt;/code&gt;, the &lt;code&gt;jobId&lt;/code&gt; is also required. 
   */
  @JsonAdapter(JobTypeEnum.Adapter.class)
  public enum JobTypeEnum {
    RELEASE("RELEASE"),
    
    RETRY("RETRY"),
    
    MANUAL("MANUAL"),
    
    WEB_HOOK("WEB_HOOK");

    private String value;

    JobTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobTypeEnum fromValue(String value) {
      for (JobTypeEnum b : JobTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  @javax.annotation.Nonnull
  private JobTypeEnum jobType;

  public static final String SERIALIZED_NAME_JOB_REASON = "jobReason";
  @SerializedName(SERIALIZED_NAME_JOB_REASON)
  @javax.annotation.Nullable
  private String jobReason;

  public static final String SERIALIZED_NAME_COMMIT_ID = "commitId";
  @SerializedName(SERIALIZED_NAME_COMMIT_ID)
  @javax.annotation.Nullable
  private String commitId;

  public static final String SERIALIZED_NAME_COMMIT_MESSAGE = "commitMessage";
  @SerializedName(SERIALIZED_NAME_COMMIT_MESSAGE)
  @javax.annotation.Nullable
  private String commitMessage;

  public static final String SERIALIZED_NAME_COMMIT_TIME = "commitTime";
  @SerializedName(SERIALIZED_NAME_COMMIT_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime commitTime;

  public StartJobRequest() {
  }

  public StartJobRequest jobId(@javax.annotation.Nullable String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   *  The unique ID for an existing job. This is required if the value of &lt;code&gt;jobType&lt;/code&gt; is &lt;code&gt;RETRY&lt;/code&gt;. 
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(@javax.annotation.Nullable String jobId) {
    this.jobId = jobId;
  }


  public StartJobRequest jobType(@javax.annotation.Nonnull JobTypeEnum jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   *  Describes the type for the job. The job type &lt;code&gt;RELEASE&lt;/code&gt; starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type &lt;code&gt;RETRY&lt;/code&gt; retries an existing job. If the job type value is &lt;code&gt;RETRY&lt;/code&gt;, the &lt;code&gt;jobId&lt;/code&gt; is also required. 
   * @return jobType
   */
  @javax.annotation.Nonnull
  public JobTypeEnum getJobType() {
    return jobType;
  }

  public void setJobType(@javax.annotation.Nonnull JobTypeEnum jobType) {
    this.jobType = jobType;
  }


  public StartJobRequest jobReason(@javax.annotation.Nullable String jobReason) {
    this.jobReason = jobReason;
    return this;
  }

  /**
   *  A descriptive reason for starting this job. 
   * @return jobReason
   */
  @javax.annotation.Nullable
  public String getJobReason() {
    return jobReason;
  }

  public void setJobReason(@javax.annotation.Nullable String jobReason) {
    this.jobReason = jobReason;
  }


  public StartJobRequest commitId(@javax.annotation.Nullable String commitId) {
    this.commitId = commitId;
    return this;
  }

  /**
   *  The commit ID from a third-party repository provider for the job. 
   * @return commitId
   */
  @javax.annotation.Nullable
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(@javax.annotation.Nullable String commitId) {
    this.commitId = commitId;
  }


  public StartJobRequest commitMessage(@javax.annotation.Nullable String commitMessage) {
    this.commitMessage = commitMessage;
    return this;
  }

  /**
   *  The commit message from a third-party repository provider for the job. 
   * @return commitMessage
   */
  @javax.annotation.Nullable
  public String getCommitMessage() {
    return commitMessage;
  }

  public void setCommitMessage(@javax.annotation.Nullable String commitMessage) {
    this.commitMessage = commitMessage;
  }


  public StartJobRequest commitTime(@javax.annotation.Nullable OffsetDateTime commitTime) {
    this.commitTime = commitTime;
    return this;
  }

  /**
   *  The commit date and time for the job. 
   * @return commitTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCommitTime() {
    return commitTime;
  }

  public void setCommitTime(@javax.annotation.Nullable OffsetDateTime commitTime) {
    this.commitTime = commitTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartJobRequest startJobRequest = (StartJobRequest) o;
    return Objects.equals(this.jobId, startJobRequest.jobId) &&
        Objects.equals(this.jobType, startJobRequest.jobType) &&
        Objects.equals(this.jobReason, startJobRequest.jobReason) &&
        Objects.equals(this.commitId, startJobRequest.commitId) &&
        Objects.equals(this.commitMessage, startJobRequest.commitMessage) &&
        Objects.equals(this.commitTime, startJobRequest.commitTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, jobType, jobReason, commitId, commitMessage, commitTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartJobRequest {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    jobReason: ").append(toIndentedString(jobReason)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    commitMessage: ").append(toIndentedString(commitMessage)).append("\n");
    sb.append("    commitTime: ").append(toIndentedString(commitTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobId");
    openapiFields.add("jobType");
    openapiFields.add("jobReason");
    openapiFields.add("commitId");
    openapiFields.add("commitMessage");
    openapiFields.add("commitTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartJobRequest is not found in the empty JSON string", StartJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if (!jsonObj.get("jobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobType").toString()));
      }
      // validate the required field `jobType`
      JobTypeEnum.validateJsonElement(jsonObj.get("jobType"));
      if ((jsonObj.get("jobReason") != null && !jsonObj.get("jobReason").isJsonNull()) && !jsonObj.get("jobReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobReason").toString()));
      }
      if ((jsonObj.get("commitId") != null && !jsonObj.get("commitId").isJsonNull()) && !jsonObj.get("commitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitId").toString()));
      }
      if ((jsonObj.get("commitMessage") != null && !jsonObj.get("commitMessage").isJsonNull()) && !jsonObj.get("commitMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartJobRequest>() {
           @Override
           public void write(JsonWriter out, StartJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartJobRequest
   * @throws IOException if the JSON string is invalid with respect to StartJobRequest
   */
  public static StartJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartJobRequest.class);
  }

  /**
   * Convert an instance of StartJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

