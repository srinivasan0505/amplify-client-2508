/*
 * AWS Amplify
 * Amplify enables developers to develop and deploy cloud-powered mobile and web apps. The Amplify Console provides a continuous delivery and hosting service for web applications. For more information, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify Console User Guide</a>. The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework.</a> 
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.JobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Describes an execution step, for an execution job, for an Amplify app. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:08:57.241962+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class Step {
  public static final String SERIALIZED_NAME_STEP_NAME = "stepName";
  @SerializedName(SERIALIZED_NAME_STEP_NAME)
  @javax.annotation.Nonnull
  private String stepName;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nonnull
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private JobStatus status;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  @javax.annotation.Nonnull
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_LOG_URL = "logUrl";
  @SerializedName(SERIALIZED_NAME_LOG_URL)
  @javax.annotation.Nullable
  private String logUrl;

  public static final String SERIALIZED_NAME_ARTIFACTS_URL = "artifactsUrl";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS_URL)
  @javax.annotation.Nullable
  private String artifactsUrl;

  public static final String SERIALIZED_NAME_TEST_ARTIFACTS_URL = "testArtifactsUrl";
  @SerializedName(SERIALIZED_NAME_TEST_ARTIFACTS_URL)
  @javax.annotation.Nullable
  private String testArtifactsUrl;

  public static final String SERIALIZED_NAME_TEST_CONFIG_URL = "testConfigUrl";
  @SerializedName(SERIALIZED_NAME_TEST_CONFIG_URL)
  @javax.annotation.Nullable
  private String testConfigUrl;

  public static final String SERIALIZED_NAME_SCREENSHOTS = "screenshots";
  @SerializedName(SERIALIZED_NAME_SCREENSHOTS)
  @javax.annotation.Nullable
  private Map screenshots;

  public static final String SERIALIZED_NAME_STATUS_REASON = "statusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  @javax.annotation.Nullable
  private String statusReason;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  @javax.annotation.Nullable
  private String context;

  public Step() {
  }

  public Step stepName(@javax.annotation.Nonnull String stepName) {
    this.stepName = stepName;
    return this;
  }

  /**
   * Get stepName
   * @return stepName
   */
  @javax.annotation.Nonnull
  public String getStepName() {
    return stepName;
  }

  public void setStepName(@javax.annotation.Nonnull String stepName) {
    this.stepName = stepName;
  }


  public Step startTime(@javax.annotation.Nonnull OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nonnull OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Step status(@javax.annotation.Nonnull JobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public JobStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull JobStatus status) {
    this.status = status;
  }


  public Step endTime(@javax.annotation.Nonnull OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(@javax.annotation.Nonnull OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public Step logUrl(@javax.annotation.Nullable String logUrl) {
    this.logUrl = logUrl;
    return this;
  }

  /**
   * Get logUrl
   * @return logUrl
   */
  @javax.annotation.Nullable
  public String getLogUrl() {
    return logUrl;
  }

  public void setLogUrl(@javax.annotation.Nullable String logUrl) {
    this.logUrl = logUrl;
  }


  public Step artifactsUrl(@javax.annotation.Nullable String artifactsUrl) {
    this.artifactsUrl = artifactsUrl;
    return this;
  }

  /**
   * Get artifactsUrl
   * @return artifactsUrl
   */
  @javax.annotation.Nullable
  public String getArtifactsUrl() {
    return artifactsUrl;
  }

  public void setArtifactsUrl(@javax.annotation.Nullable String artifactsUrl) {
    this.artifactsUrl = artifactsUrl;
  }


  public Step testArtifactsUrl(@javax.annotation.Nullable String testArtifactsUrl) {
    this.testArtifactsUrl = testArtifactsUrl;
    return this;
  }

  /**
   * Get testArtifactsUrl
   * @return testArtifactsUrl
   */
  @javax.annotation.Nullable
  public String getTestArtifactsUrl() {
    return testArtifactsUrl;
  }

  public void setTestArtifactsUrl(@javax.annotation.Nullable String testArtifactsUrl) {
    this.testArtifactsUrl = testArtifactsUrl;
  }


  public Step testConfigUrl(@javax.annotation.Nullable String testConfigUrl) {
    this.testConfigUrl = testConfigUrl;
    return this;
  }

  /**
   * Get testConfigUrl
   * @return testConfigUrl
   */
  @javax.annotation.Nullable
  public String getTestConfigUrl() {
    return testConfigUrl;
  }

  public void setTestConfigUrl(@javax.annotation.Nullable String testConfigUrl) {
    this.testConfigUrl = testConfigUrl;
  }


  public Step screenshots(@javax.annotation.Nullable Map screenshots) {
    this.screenshots = screenshots;
    return this;
  }

  /**
   * Get screenshots
   * @return screenshots
   */
  @javax.annotation.Nullable
  public Map getScreenshots() {
    return screenshots;
  }

  public void setScreenshots(@javax.annotation.Nullable Map screenshots) {
    this.screenshots = screenshots;
  }


  public Step statusReason(@javax.annotation.Nullable String statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nullable
  public String getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(@javax.annotation.Nullable String statusReason) {
    this.statusReason = statusReason;
  }


  public Step context(@javax.annotation.Nullable String context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public String getContext() {
    return context;
  }

  public void setContext(@javax.annotation.Nullable String context) {
    this.context = context;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Step step = (Step) o;
    return Objects.equals(this.stepName, step.stepName) &&
        Objects.equals(this.startTime, step.startTime) &&
        Objects.equals(this.status, step.status) &&
        Objects.equals(this.endTime, step.endTime) &&
        Objects.equals(this.logUrl, step.logUrl) &&
        Objects.equals(this.artifactsUrl, step.artifactsUrl) &&
        Objects.equals(this.testArtifactsUrl, step.testArtifactsUrl) &&
        Objects.equals(this.testConfigUrl, step.testConfigUrl) &&
        Objects.equals(this.screenshots, step.screenshots) &&
        Objects.equals(this.statusReason, step.statusReason) &&
        Objects.equals(this.context, step.context);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stepName, startTime, status, endTime, logUrl, artifactsUrl, testArtifactsUrl, testConfigUrl, screenshots, statusReason, context);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Step {\n");
    sb.append("    stepName: ").append(toIndentedString(stepName)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    logUrl: ").append(toIndentedString(logUrl)).append("\n");
    sb.append("    artifactsUrl: ").append(toIndentedString(artifactsUrl)).append("\n");
    sb.append("    testArtifactsUrl: ").append(toIndentedString(testArtifactsUrl)).append("\n");
    sb.append("    testConfigUrl: ").append(toIndentedString(testConfigUrl)).append("\n");
    sb.append("    screenshots: ").append(toIndentedString(screenshots)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stepName");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("endTime");
    openapiFields.add("logUrl");
    openapiFields.add("artifactsUrl");
    openapiFields.add("testArtifactsUrl");
    openapiFields.add("testConfigUrl");
    openapiFields.add("screenshots");
    openapiFields.add("statusReason");
    openapiFields.add("context");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("stepName");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("endTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Step
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Step.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Step is not found in the empty JSON string", Step.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Step.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Step` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Step.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `stepName`
      String.validateJsonElement(jsonObj.get("stepName"));
      // validate the required field `startTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      // validate the required field `status`
      JobStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `endTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("endTime"));
      // validate the optional field `logUrl`
      if (jsonObj.get("logUrl") != null && !jsonObj.get("logUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("logUrl"));
      }
      // validate the optional field `artifactsUrl`
      if (jsonObj.get("artifactsUrl") != null && !jsonObj.get("artifactsUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("artifactsUrl"));
      }
      // validate the optional field `testArtifactsUrl`
      if (jsonObj.get("testArtifactsUrl") != null && !jsonObj.get("testArtifactsUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testArtifactsUrl"));
      }
      // validate the optional field `testConfigUrl`
      if (jsonObj.get("testConfigUrl") != null && !jsonObj.get("testConfigUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testConfigUrl"));
      }
      // validate the optional field `screenshots`
      if (jsonObj.get("screenshots") != null && !jsonObj.get("screenshots").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("screenshots"));
      }
      // validate the optional field `statusReason`
      if (jsonObj.get("statusReason") != null && !jsonObj.get("statusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusReason"));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("context"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Step.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Step' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Step> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Step.class));

       return (TypeAdapter<T>) new TypeAdapter<Step>() {
           @Override
           public void write(JsonWriter out, Step value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Step read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Step given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Step
   * @throws IOException if the JSON string is invalid with respect to Step
   */
  public static Step fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Step.class);
  }

  /**
   * Convert an instance of Step to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

