/*
 * AWS Amplify
 * Amplify enables developers to develop and deploy cloud-powered mobile and web apps. The Amplify Console provides a continuous delivery and hosting service for web applications. For more information, see the <a href=\"https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html\">Amplify Console User Guide</a>. The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href=\"https://docs.amplify.aws/\">Amplify Framework.</a> 
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DomainStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDomainAssociationResultDomainAssociation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:08:57.241962+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class UpdateDomainAssociationResultDomainAssociation {
  public static final String SERIALIZED_NAME_DOMAIN_ASSOCIATION_ARN = "domainAssociationArn";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ASSOCIATION_ARN)
  @javax.annotation.Nonnull
  private String domainAssociationArn;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  @javax.annotation.Nonnull
  private String domainName;

  public static final String SERIALIZED_NAME_ENABLE_AUTO_SUB_DOMAIN = "enableAutoSubDomain";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUTO_SUB_DOMAIN)
  @javax.annotation.Nonnull
  private Boolean enableAutoSubDomain;

  public static final String SERIALIZED_NAME_AUTO_SUB_DOMAIN_CREATION_PATTERNS = "autoSubDomainCreationPatterns";
  @SerializedName(SERIALIZED_NAME_AUTO_SUB_DOMAIN_CREATION_PATTERNS)
  @javax.annotation.Nullable
  private List autoSubDomainCreationPatterns;

  public static final String SERIALIZED_NAME_AUTO_SUB_DOMAIN_I_A_M_ROLE = "autoSubDomainIAMRole";
  @SerializedName(SERIALIZED_NAME_AUTO_SUB_DOMAIN_I_A_M_ROLE)
  @javax.annotation.Nullable
  private String autoSubDomainIAMRole;

  public static final String SERIALIZED_NAME_DOMAIN_STATUS = "domainStatus";
  @SerializedName(SERIALIZED_NAME_DOMAIN_STATUS)
  @javax.annotation.Nonnull
  private DomainStatus domainStatus;

  public static final String SERIALIZED_NAME_STATUS_REASON = "statusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  @javax.annotation.Nonnull
  private String statusReason;

  public static final String SERIALIZED_NAME_CERTIFICATE_VERIFICATION_D_N_S_RECORD = "certificateVerificationDNSRecord";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_VERIFICATION_D_N_S_RECORD)
  @javax.annotation.Nullable
  private String certificateVerificationDNSRecord;

  public static final String SERIALIZED_NAME_SUB_DOMAINS = "subDomains";
  @SerializedName(SERIALIZED_NAME_SUB_DOMAINS)
  @javax.annotation.Nonnull
  private List subDomains;

  public UpdateDomainAssociationResultDomainAssociation() {
  }

  public UpdateDomainAssociationResultDomainAssociation domainAssociationArn(@javax.annotation.Nonnull String domainAssociationArn) {
    this.domainAssociationArn = domainAssociationArn;
    return this;
  }

  /**
   * Get domainAssociationArn
   * @return domainAssociationArn
   */
  @javax.annotation.Nonnull
  public String getDomainAssociationArn() {
    return domainAssociationArn;
  }

  public void setDomainAssociationArn(@javax.annotation.Nonnull String domainAssociationArn) {
    this.domainAssociationArn = domainAssociationArn;
  }


  public UpdateDomainAssociationResultDomainAssociation domainName(@javax.annotation.Nonnull String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(@javax.annotation.Nonnull String domainName) {
    this.domainName = domainName;
  }


  public UpdateDomainAssociationResultDomainAssociation enableAutoSubDomain(@javax.annotation.Nonnull Boolean enableAutoSubDomain) {
    this.enableAutoSubDomain = enableAutoSubDomain;
    return this;
  }

  /**
   * Get enableAutoSubDomain
   * @return enableAutoSubDomain
   */
  @javax.annotation.Nonnull
  public Boolean getEnableAutoSubDomain() {
    return enableAutoSubDomain;
  }

  public void setEnableAutoSubDomain(@javax.annotation.Nonnull Boolean enableAutoSubDomain) {
    this.enableAutoSubDomain = enableAutoSubDomain;
  }


  public UpdateDomainAssociationResultDomainAssociation autoSubDomainCreationPatterns(@javax.annotation.Nullable List autoSubDomainCreationPatterns) {
    this.autoSubDomainCreationPatterns = autoSubDomainCreationPatterns;
    return this;
  }

  /**
   * Get autoSubDomainCreationPatterns
   * @return autoSubDomainCreationPatterns
   */
  @javax.annotation.Nullable
  public List getAutoSubDomainCreationPatterns() {
    return autoSubDomainCreationPatterns;
  }

  public void setAutoSubDomainCreationPatterns(@javax.annotation.Nullable List autoSubDomainCreationPatterns) {
    this.autoSubDomainCreationPatterns = autoSubDomainCreationPatterns;
  }


  public UpdateDomainAssociationResultDomainAssociation autoSubDomainIAMRole(@javax.annotation.Nullable String autoSubDomainIAMRole) {
    this.autoSubDomainIAMRole = autoSubDomainIAMRole;
    return this;
  }

  /**
   * Get autoSubDomainIAMRole
   * @return autoSubDomainIAMRole
   */
  @javax.annotation.Nullable
  public String getAutoSubDomainIAMRole() {
    return autoSubDomainIAMRole;
  }

  public void setAutoSubDomainIAMRole(@javax.annotation.Nullable String autoSubDomainIAMRole) {
    this.autoSubDomainIAMRole = autoSubDomainIAMRole;
  }


  public UpdateDomainAssociationResultDomainAssociation domainStatus(@javax.annotation.Nonnull DomainStatus domainStatus) {
    this.domainStatus = domainStatus;
    return this;
  }

  /**
   * Get domainStatus
   * @return domainStatus
   */
  @javax.annotation.Nonnull
  public DomainStatus getDomainStatus() {
    return domainStatus;
  }

  public void setDomainStatus(@javax.annotation.Nonnull DomainStatus domainStatus) {
    this.domainStatus = domainStatus;
  }


  public UpdateDomainAssociationResultDomainAssociation statusReason(@javax.annotation.Nonnull String statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nonnull
  public String getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(@javax.annotation.Nonnull String statusReason) {
    this.statusReason = statusReason;
  }


  public UpdateDomainAssociationResultDomainAssociation certificateVerificationDNSRecord(@javax.annotation.Nullable String certificateVerificationDNSRecord) {
    this.certificateVerificationDNSRecord = certificateVerificationDNSRecord;
    return this;
  }

  /**
   * Get certificateVerificationDNSRecord
   * @return certificateVerificationDNSRecord
   */
  @javax.annotation.Nullable
  public String getCertificateVerificationDNSRecord() {
    return certificateVerificationDNSRecord;
  }

  public void setCertificateVerificationDNSRecord(@javax.annotation.Nullable String certificateVerificationDNSRecord) {
    this.certificateVerificationDNSRecord = certificateVerificationDNSRecord;
  }


  public UpdateDomainAssociationResultDomainAssociation subDomains(@javax.annotation.Nonnull List subDomains) {
    this.subDomains = subDomains;
    return this;
  }

  /**
   * Get subDomains
   * @return subDomains
   */
  @javax.annotation.Nonnull
  public List getSubDomains() {
    return subDomains;
  }

  public void setSubDomains(@javax.annotation.Nonnull List subDomains) {
    this.subDomains = subDomains;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDomainAssociationResultDomainAssociation updateDomainAssociationResultDomainAssociation = (UpdateDomainAssociationResultDomainAssociation) o;
    return Objects.equals(this.domainAssociationArn, updateDomainAssociationResultDomainAssociation.domainAssociationArn) &&
        Objects.equals(this.domainName, updateDomainAssociationResultDomainAssociation.domainName) &&
        Objects.equals(this.enableAutoSubDomain, updateDomainAssociationResultDomainAssociation.enableAutoSubDomain) &&
        Objects.equals(this.autoSubDomainCreationPatterns, updateDomainAssociationResultDomainAssociation.autoSubDomainCreationPatterns) &&
        Objects.equals(this.autoSubDomainIAMRole, updateDomainAssociationResultDomainAssociation.autoSubDomainIAMRole) &&
        Objects.equals(this.domainStatus, updateDomainAssociationResultDomainAssociation.domainStatus) &&
        Objects.equals(this.statusReason, updateDomainAssociationResultDomainAssociation.statusReason) &&
        Objects.equals(this.certificateVerificationDNSRecord, updateDomainAssociationResultDomainAssociation.certificateVerificationDNSRecord) &&
        Objects.equals(this.subDomains, updateDomainAssociationResultDomainAssociation.subDomains);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainAssociationArn, domainName, enableAutoSubDomain, autoSubDomainCreationPatterns, autoSubDomainIAMRole, domainStatus, statusReason, certificateVerificationDNSRecord, subDomains);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDomainAssociationResultDomainAssociation {\n");
    sb.append("    domainAssociationArn: ").append(toIndentedString(domainAssociationArn)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    enableAutoSubDomain: ").append(toIndentedString(enableAutoSubDomain)).append("\n");
    sb.append("    autoSubDomainCreationPatterns: ").append(toIndentedString(autoSubDomainCreationPatterns)).append("\n");
    sb.append("    autoSubDomainIAMRole: ").append(toIndentedString(autoSubDomainIAMRole)).append("\n");
    sb.append("    domainStatus: ").append(toIndentedString(domainStatus)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    certificateVerificationDNSRecord: ").append(toIndentedString(certificateVerificationDNSRecord)).append("\n");
    sb.append("    subDomains: ").append(toIndentedString(subDomains)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domainAssociationArn");
    openapiFields.add("domainName");
    openapiFields.add("enableAutoSubDomain");
    openapiFields.add("autoSubDomainCreationPatterns");
    openapiFields.add("autoSubDomainIAMRole");
    openapiFields.add("domainStatus");
    openapiFields.add("statusReason");
    openapiFields.add("certificateVerificationDNSRecord");
    openapiFields.add("subDomains");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domainAssociationArn");
    openapiRequiredFields.add("domainName");
    openapiRequiredFields.add("enableAutoSubDomain");
    openapiRequiredFields.add("domainStatus");
    openapiRequiredFields.add("statusReason");
    openapiRequiredFields.add("subDomains");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDomainAssociationResultDomainAssociation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDomainAssociationResultDomainAssociation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDomainAssociationResultDomainAssociation is not found in the empty JSON string", UpdateDomainAssociationResultDomainAssociation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDomainAssociationResultDomainAssociation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDomainAssociationResultDomainAssociation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateDomainAssociationResultDomainAssociation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `domainAssociationArn`
      String.validateJsonElement(jsonObj.get("domainAssociationArn"));
      // validate the required field `domainName`
      String.validateJsonElement(jsonObj.get("domainName"));
      // validate the required field `enableAutoSubDomain`
      Boolean.validateJsonElement(jsonObj.get("enableAutoSubDomain"));
      // validate the optional field `autoSubDomainCreationPatterns`
      if (jsonObj.get("autoSubDomainCreationPatterns") != null && !jsonObj.get("autoSubDomainCreationPatterns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("autoSubDomainCreationPatterns"));
      }
      // validate the optional field `autoSubDomainIAMRole`
      if (jsonObj.get("autoSubDomainIAMRole") != null && !jsonObj.get("autoSubDomainIAMRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("autoSubDomainIAMRole"));
      }
      // validate the required field `domainStatus`
      DomainStatus.validateJsonElement(jsonObj.get("domainStatus"));
      // validate the required field `statusReason`
      String.validateJsonElement(jsonObj.get("statusReason"));
      // validate the optional field `certificateVerificationDNSRecord`
      if (jsonObj.get("certificateVerificationDNSRecord") != null && !jsonObj.get("certificateVerificationDNSRecord").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("certificateVerificationDNSRecord"));
      }
      // validate the required field `subDomains`
      List.validateJsonElement(jsonObj.get("subDomains"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDomainAssociationResultDomainAssociation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDomainAssociationResultDomainAssociation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDomainAssociationResultDomainAssociation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDomainAssociationResultDomainAssociation.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDomainAssociationResultDomainAssociation>() {
           @Override
           public void write(JsonWriter out, UpdateDomainAssociationResultDomainAssociation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDomainAssociationResultDomainAssociation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDomainAssociationResultDomainAssociation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDomainAssociationResultDomainAssociation
   * @throws IOException if the JSON string is invalid with respect to UpdateDomainAssociationResultDomainAssociation
   */
  public static UpdateDomainAssociationResultDomainAssociation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDomainAssociationResultDomainAssociation.class);
  }

  /**
   * Convert an instance of UpdateDomainAssociationResultDomainAssociation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

